/*
** EPITECH PROJECT, 2021
** B-OOP-400-NCE-4-1-arcade-clement1.berard
** File description:
** IGraphic
*/

#ifndef IGRAPHIC_HPP_
#define IGRAPHIC_HPP_

/*!
* \file IGraphic.hpp
* \author Nico
* \brief Contain interface graphic
* \version 1.0
*/

#include "Class_Scene.hpp"

/**
* \class IGraphic
* \brief Interface of graphical class
*/
class IGraphic
{
    public:
        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 21/03/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual ~IGraphic() = default
        ///
        /// \brief Destructor generated by compiler
        ///
        ////////////////////////////////////////////////////////////
        virtual ~IGraphic() = default;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 07/04/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual int get_event() = 0
        ///
        /// \brief Get Event of Window make by user
        ///
        /// \return enum of event
        ///
        ////////////////////////////////////////////////////////////
        virtual int get_event() = 0;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \version 1.0
        ///
        /// \date 07/04/21
        ///
        /// \fn virtual Position *getMouse_position() = 0
        ///
        /// \brief Get mouse position
        ///
        /// \return Position class with x and y mouse
        ///
        ////////////////////////////////////////////////////////////
        virtual Position *getMouse_position() = 0;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 21/03/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual int initialize_window(short window_x, short window_y, std::string name) = 0
        ///
        /// \brief init window in child class inherits IGraphic 
        ///
        /// \param[in] window_x Width of window
        /// \param[in] window_y Height of window
        /// \param[in] name Title of the window
        ///
        /// \return negative number if they was a error
        ///
        ////////////////////////////////////////////////////////////
        virtual int initialize_window(short window_x, short window_y, std::string name) = 0;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 22/03/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual bool windowIsOpen() = 0
        ///
        /// \brief True if window open else False
        ///
        /// \return True or False
        ///
        ////////////////////////////////////////////////////////////
        virtual bool windowIsOpen() = 0;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 21/03/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual void closeWindow() = 0
        ///
        /// \brief close window
        ///
        ////////////////////////////////////////////////////////////
        virtual void closeWindow() = 0;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 10/04/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual void set_Title() = 0
        ///
        /// \brief set new Title
        ///
        /// \param[in] title new title for set
        ///
        ////////////////////////////////////////////////////////////
        virtual void set_Title(std::string title) = 0;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 21/03/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual void display() = 0
        ///
        /// \brief display in lib graphic
        ///
        ////////////////////////////////////////////////////////////
        virtual void display() = 0;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 21/03/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual std::string get_name_graphic() const = 0
        ///
        /// \brief Get name of the graphic library
        ///
        /// \return name of library
        ///
        ////////////////////////////////////////////////////////////
        virtual std::string get_name_graphic() const = 0;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 22/03/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual bool in_terminal() const = 0
        ///
        /// \brief determine if this class render in a window or in a terminal
        ///
        /// \return true if the render is in terminal else false
        ///
        ////////////////////////////////////////////////////////////
        virtual bool in_terminal() const = 0;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 03/04/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual void init_scene(Scene *scene) = 0
        ///
        /// \brief Init all element of scene game in graphic lib
        ///
        /// \param[in, out] scene of game
        ///
        ////////////////////////////////////////////////////////////
        virtual void init_scene(Scene *scene) = 0;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 03/04/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual void update_scene(Scene *scene) = 0
        ///
        /// \brief update all element of scene game in graphic lib
        ///
        /// \param[in, out] scene of game
        ///
        ////////////////////////////////////////////////////////////
        virtual void update_scene(Scene *scene) = 0;

        ////////////////////////////////////////////////////////////
        ///
        /// \author Nico
        ///
        /// \date 10/04/21
        ///
        /// \version 1.0
        ///
        /// \fn virtual void clear_graphical_scene() = 0
        ///
        /// \brief Clear list of render
        ///
        ////////////////////////////////////////////////////////////
        virtual void clear_graphical_scene() = 0;
};

#endif /* !IGRAPHIC_HPP_ */

